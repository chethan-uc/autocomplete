
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'leftOR_OPleftAND_OPnonassocMINUSnonassocPLUSnonassocAPPROXnonassocBOOSTnonassocLPARENRPARENnonassocLBRACKETTORBRACKETnonassocREGEXnonassocPHRASEnonassocTERMAND_OP APPROX BOOST COLUMN LBRACKET LPAREN MINUS NOT OR_OP PHRASE PLUS RBRACKET REGEX RPAREN TERM TOexpression : expression OR_OP expressionexpression : expression AND_OP expressionexpression : expression expressionunary_expression : PLUS unary_expressionunary_expression : MINUS unary_expressionunary_expression : NOT unary_expressionexpression : unary_expressionunary_expression : LPAREN expression RPARENunary_expression : LBRACKET phrase_or_term TO phrase_or_term RBRACKETunary_expression : TERM COLUMN unary_expressionunary_expression : PHRASEunary_expression : PHRASE APPROXexpression : expression BOOSTunary_expression : TERM unary_expression : unary_expression unary_expression unary_expression : TERM APPROXunary_expression : REGEXunary_expression : TOphrase_or_term : TERM\n                      | PHRASE'
    
_lr_action_items = {'PLUS':([0,1,2,3,4,5,6,8,9,10,11,12,13,14,15,16,17,18,19,20,24,25,26,27,28,29,31,33,],[3,3,3,3,3,3,3,-18,-14,-11,-17,3,3,3,-13,3,None,3,3,3,3,-16,-12,3,3,-8,3,-9,]),'MINUS':([0,1,2,3,4,5,6,8,9,10,11,12,13,14,15,16,17,18,19,20,24,25,26,27,28,29,31,33,],[4,4,4,4,4,4,4,-18,-14,-11,-17,4,4,4,-13,4,-4,None,4,4,4,-16,-12,4,4,-8,4,-9,]),'NOT':([0,1,2,3,4,5,6,8,9,10,11,12,13,14,15,16,17,18,19,20,24,25,26,27,28,29,31,33,],[5,5,5,5,5,5,5,-18,-14,-11,-17,5,5,5,-13,5,-4,-5,5,5,5,-16,-12,-1,-2,-8,5,-9,]),'LPAREN':([0,1,2,3,4,5,6,8,9,10,11,12,13,14,15,16,17,18,19,20,24,25,26,27,28,29,31,33,],[6,6,6,6,6,6,6,-18,-14,-11,-17,6,6,6,-13,6,6,6,6,6,6,-16,-12,6,6,-8,6,-9,]),'LBRACKET':([0,1,2,3,4,5,6,8,9,10,11,12,13,14,15,16,17,18,19,20,24,25,26,27,28,29,31,33,],[7,7,7,7,7,7,7,-18,-14,-11,-17,7,7,7,-13,7,7,7,7,7,7,-16,-12,7,7,-8,7,-9,]),'TERM':([0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,24,25,26,27,28,29,30,31,33,],[9,9,9,9,9,9,9,22,-18,-14,-11,-17,9,9,9,-13,9,9,9,9,9,9,-16,-12,9,9,-8,22,9,-9,]),'PHRASE':([0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,24,25,26,27,28,29,30,31,33,],[10,10,10,10,10,10,10,23,-18,-14,-11,-17,10,10,10,-13,10,10,10,10,10,10,-16,-12,10,10,-8,23,10,-9,]),'REGEX':([0,1,2,3,4,5,6,8,9,10,11,12,13,14,15,16,17,18,19,20,24,25,26,27,28,29,31,33,],[11,11,11,11,11,11,11,-18,-14,-11,-17,11,11,11,-13,11,11,11,11,11,11,-16,-12,11,11,-8,11,-9,]),'TO':([0,1,2,3,4,5,6,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,31,33,],[8,8,8,8,8,8,8,-18,-14,-11,-17,8,8,8,-13,8,8,8,8,8,30,-19,-20,8,-16,-12,8,8,-8,8,-9,]),'$end':([1,2,8,9,10,11,12,15,16,17,18,19,25,26,27,28,29,31,33,],[0,-7,-18,-14,-11,-17,-3,-13,-15,-4,-5,-6,-16,-12,-1,-2,-8,-10,-9,]),'OR_OP':([1,2,8,9,10,11,12,15,16,17,18,19,20,25,26,27,28,29,31,33,],[13,-7,-18,-14,-11,-17,13,-13,-15,-4,-5,-6,13,-16,-12,-1,-2,-8,-10,-9,]),'AND_OP':([1,2,8,9,10,11,12,15,16,17,18,19,20,25,26,27,28,29,31,33,],[14,-7,-18,-14,-11,-17,14,-13,-15,-4,-5,-6,14,-16,-12,14,-2,-8,-10,-9,]),'BOOST':([1,2,8,9,10,11,12,15,16,17,18,19,20,25,26,27,28,29,31,33,],[15,-7,-18,-14,-11,-17,15,-13,-15,-4,-5,-6,15,-16,-12,15,15,-8,-10,-9,]),'RPAREN':([2,8,9,10,11,12,15,16,17,18,19,20,25,26,27,28,29,31,33,],[-7,-18,-14,-11,-17,-3,-13,-15,-4,-5,-6,29,-16,-12,-1,-2,-8,-10,-9,]),'COLUMN':([9,],[24,]),'APPROX':([9,10,],[25,26,]),'RBRACKET':([22,23,32,],[-19,-20,33,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'expression':([0,1,6,12,13,14,20,27,28,],[1,12,20,12,27,28,12,12,12,]),'unary_expression':([0,1,2,3,4,5,6,12,13,14,16,17,18,19,20,24,27,28,31,],[2,2,16,17,18,19,2,2,2,2,16,16,16,16,2,31,2,2,16,]),'phrase_or_term':([7,30,],[21,32,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> expression","S'",1,None,None,None),
  ('expression -> expression OR_OP expression','expression',3,'p_expression_or','parser.py',247),
  ('expression -> expression AND_OP expression','expression',3,'p_expression_and','parser.py',253),
  ('expression -> expression expression','expression',2,'p_expression_implicit','parser.py',259),
  ('unary_expression -> PLUS unary_expression','unary_expression',2,'p_expression_plus','parser.py',265),
  ('unary_expression -> MINUS unary_expression','unary_expression',2,'p_expression_minus','parser.py',271),
  ('unary_expression -> NOT unary_expression','unary_expression',2,'p_expression_not','parser.py',277),
  ('expression -> unary_expression','expression',1,'p_expression_unary','parser.py',283),
  ('unary_expression -> LPAREN expression RPAREN','unary_expression',3,'p_grouping','parser.py',288),
  ('unary_expression -> LBRACKET phrase_or_term TO phrase_or_term RBRACKET','unary_expression',5,'p_range','parser.py',294),
  ('unary_expression -> TERM COLUMN unary_expression','unary_expression',3,'p_field_search','parser.py',302),
  ('unary_expression -> PHRASE','unary_expression',1,'p_quoting','parser.py',311),
  ('unary_expression -> PHRASE APPROX','unary_expression',2,'p_proximity','parser.py',316),
  ('expression -> expression BOOST','expression',2,'p_boosting','parser.py',322),
  ('unary_expression -> TERM','unary_expression',1,'p_terms','parser.py',328),
  ('unary_expression -> unary_expression unary_expression','unary_expression',2,'p_term_implicit','parser.py',333),
  ('unary_expression -> TERM APPROX','unary_expression',2,'p_fuzzy','parser.py',339),
  ('unary_expression -> REGEX','unary_expression',1,'p_regex','parser.py',345),
  ('unary_expression -> TO','unary_expression',1,'p_to_as_term','parser.py',351),
  ('phrase_or_term -> TERM','phrase_or_term',1,'p_phrase_or_term','parser.py',357),
  ('phrase_or_term -> PHRASE','phrase_or_term',1,'p_phrase_or_term','parser.py',358),
]
